# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InformaticsPluginDialog
                                 A QGIS plugin
 This is a test plug-in for the Geodetic Informatics II class.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by WSamek PPietrykowska
        email                : 01169913@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsWkbTypes

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Informatics_plugin_dialog_base.ui'))


class InformaticsPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(InformaticsPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushbutton_count.clicked.connect(self.count_objects)
        self.pushbutton_showcoordinates.clicked.connect(self.enter_data_on_marked_object)
        self.pushbutton_hight.clicked.connect(self.calculate_height_difference)
    
    def count_objects(self):
        selected_features = self.mMapLayerComboBox.currentLayer().selectedFeatures() 
        number_of_selected_elements = len(selected_features)
        self.label_select.setText(str(number_of_selected_elements))    
    
    def enter_data_on_marked_object(self):
        active_layer = iface.activeLayer()
        sel_features = active_layer.selectedFeatures()
        self.label_active.setText(active_layer.name())
        
        for feature in sel_features:
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            
            if geom.type() == QgsWkbTypes.PointGeometry:
                if geomSingleType:
                    x = geom.asPoint()
                    self.listObjects.append(f'Point:3{str(x)},3\r\n')
                else:
                    x = geom.asMultiPoint()
                    self.listObjects.append(f'MultiPoint:3{str(x)},3\r\n')
            elif geom.type() == QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    x = geom.asPolyline()
                    self.listObjects.append(f'Polyline:3{str(x)},3\r\n')
                else:
                    x = geom.asMultiPolyline()
                    self.listObjects.append(f'Polyline:3{str(x)},3\r\n')
            elif geom.type() == QgsWkbTypes.PolygonGeometry:
                if geomSingleType:
                    x = geom.asPolygon()
                    self.listObjects.append(f'Polygon:3{str(x)},3\r\n')
                else:
                    x = geom.asMultiPolygon()
                    self.listObjects.append(f'MultiPolygon:3{str(x)},3\r\n')
            else:
                print("Unknown_or_invalid geometry")
                
    def calculate_height_difference(self): 
        selected_layer = self.mMapLayerComboBox.currentLayer()
        number_elements  = len(selected_layer.selectedFeatures())       
        if number_elements == 2: 
            Nr = []
            X = []
            Y = []
            Z = []
            selected_elements = selected_layer.selectedFeatures()        
            for elementy in selected_elements:
                pnr = elementy["Nr"]
                px = elementy["X"]
                py = elementy["Y"]
                pz = elementy["Z"]
                Nr.append(pnr)
                X.append(px)
                Y.append(py)
                Z.append(pz)
            H = Z[1] - Z[0]
            self.listoHigh.setText(f'The calculated elevation between point {Nr[0]} and point {Nr[1]} is {H:.3f} m')   
        elif number_elements < 2:
            self.listoHigh.setText("Not enough points selected")
        else number_elements > 2:
            self.listoHigh.setText("Too many points were selected ")
            